// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TSDB_H_
#define FLATBUFFERS_GENERATED_TSDB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

struct TimeSeriesPoint;
struct TimeSeriesPointBuilder;

struct CompressedTimeSeriesSegment;
struct CompressedTimeSeriesSegmentBuilder;

struct TimeSeriesPoint FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TimeSeriesPointBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIMESTAMP = 4,
    VT_VALUE = 6
  };
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  double value() const {
    return GetField<double>(VT_VALUE, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           VerifyField<double>(verifier, VT_VALUE, 8) &&
           verifier.EndTable();
  }
};

struct TimeSeriesPointBuilder {
  typedef TimeSeriesPoint Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(TimeSeriesPoint::VT_TIMESTAMP, timestamp, 0);
  }
  void add_value(double value) {
    fbb_.AddElement<double>(TimeSeriesPoint::VT_VALUE, value, 0.0);
  }
  explicit TimeSeriesPointBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TimeSeriesPoint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TimeSeriesPoint>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TimeSeriesPoint> CreateTimeSeriesPoint(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t timestamp = 0,
    double value = 0.0) {
  TimeSeriesPointBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_timestamp(timestamp);
  return builder_.Finish();
}

struct CompressedTimeSeriesSegment FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CompressedTimeSeriesSegmentBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_METADATA = 4,
    VT_VALUES = 6
  };
  const ::flatbuffers::Vector<int8_t> *metadata() const {
    return GetPointer<const ::flatbuffers::Vector<int8_t> *>(VT_METADATA);
  }
  const ::flatbuffers::Vector<double> *values() const {
    return GetPointer<const ::flatbuffers::Vector<double> *>(VT_VALUES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_METADATA) &&
           verifier.VerifyVector(metadata()) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           verifier.EndTable();
  }
};

struct CompressedTimeSeriesSegmentBuilder {
  typedef CompressedTimeSeriesSegment Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_metadata(::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> metadata) {
    fbb_.AddOffset(CompressedTimeSeriesSegment::VT_METADATA, metadata);
  }
  void add_values(::flatbuffers::Offset<::flatbuffers::Vector<double>> values) {
    fbb_.AddOffset(CompressedTimeSeriesSegment::VT_VALUES, values);
  }
  explicit CompressedTimeSeriesSegmentBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CompressedTimeSeriesSegment> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CompressedTimeSeriesSegment>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CompressedTimeSeriesSegment> CreateCompressedTimeSeriesSegment(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int8_t>> metadata = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<double>> values = 0) {
  CompressedTimeSeriesSegmentBuilder builder_(_fbb);
  builder_.add_values(values);
  builder_.add_metadata(metadata);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CompressedTimeSeriesSegment> CreateCompressedTimeSeriesSegmentDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int8_t> *metadata = nullptr,
    const std::vector<double> *values = nullptr) {
  auto metadata__ = metadata ? _fbb.CreateVector<int8_t>(*metadata) : 0;
  auto values__ = values ? _fbb.CreateVector<double>(*values) : 0;
  return CreateCompressedTimeSeriesSegment(
      _fbb,
      metadata__,
      values__);
}

inline const CompressedTimeSeriesSegment *GetCompressedTimeSeriesSegment(const void *buf) {
  return ::flatbuffers::GetRoot<CompressedTimeSeriesSegment>(buf);
}

inline const CompressedTimeSeriesSegment *GetSizePrefixedCompressedTimeSeriesSegment(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<CompressedTimeSeriesSegment>(buf);
}

inline bool VerifyCompressedTimeSeriesSegmentBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CompressedTimeSeriesSegment>(nullptr);
}

inline bool VerifySizePrefixedCompressedTimeSeriesSegmentBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CompressedTimeSeriesSegment>(nullptr);
}

inline void FinishCompressedTimeSeriesSegmentBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CompressedTimeSeriesSegment> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCompressedTimeSeriesSegmentBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CompressedTimeSeriesSegment> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_TSDB_H_
